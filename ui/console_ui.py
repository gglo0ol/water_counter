from datetime import datetime, date
from typing import List
from sqlalchemy.orm import Session
from models.database import get_db
from models.entities import Counter, Reading, Payment, Tariff
from services.counter_service import CounterService
from services.reading_service import ReadingService
from services.payment_service import PaymentService
from models.schemas import ReadingCreate, CounterCreate

class ConsoleUI:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db = next(get_db())
        self.counter_service = CounterService(self.db)
        self.reading_service = ReadingService(self.db)
        self.payment_service = PaymentService(self.db)
    
    def show_main_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("\n" + "="*50)
        print("üåä WATER COUNTER - –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤")
        print("="*50)
        print("1. –í–≤–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤")
        print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á–µ—Ç—á–∏–∫–∏")
        print("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π")
        print("4. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∑–∞ –º–µ—Å—è—Ü")
        print("5. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π")
        print("6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
        print("7. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞–º–∏")
        print("8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("0. –í—ã—Ö–æ–¥")
        print("-"*50)
    
    def input_readings(self):
        """–í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        print("\nüìä –í–í–û–î –ü–û–ö–ê–ó–ê–ù–ò–ô –°–ß–ï–¢–ß–ò–ö–û–í")
        print("-"*30)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
        counters = self.counter_service.get_all_counters()
        if not counters:
            print("‚ùå –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞–Ω–∏–π
        try:
            current_date = datetime.now()
            default_date_str = current_date.strftime("%d.%m.%Y")
            date_str = input(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞–Ω–∏–π (–î–î.–ú–ú.–ì–ì–ì–ì, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_date_str}): ").strip()
            if date_str:
                reading_date = datetime.strptime(date_str, "%d.%m.%Y")
            else:
                reading_date = current_date
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        
        print(f"\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –Ω–∞ {reading_date.strftime('%d.%m.%Y')}:")
        
        for counter in counters:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ
            latest_reading = self.reading_service.get_latest_reading_by_counter(counter.id)
            last_value = latest_reading.value if latest_reading else 0
            
            print(f"\n{counter.description} ({counter.number})")
            print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {last_value} –º¬≥")
            
            while True:
                try:
                    value = int(input("–ù–æ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ (–º¬≥): "))
                    if value < last_value:
                        print(f"‚ùå –ù–æ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ({last_value})")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ
                    reading_data = ReadingCreate(
                        counter_id=counter.id,
                        value=value,
                        reading_date=reading_date
                    )
                    
                    self.reading_service.create_reading(reading_data)
                    print(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏–µ {value} –º¬≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    break
                    
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def show_counters(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        print("\nüîß –°–ß–ï–¢–ß–ò–ö–ò")
        print("-"*30)
        
        counters = self.counter_service.get_all_counters()
        if not counters:
            print("–°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for counter in counters:
            latest_reading = self.reading_service.get_latest_reading_by_counter(counter.id)
            last_value = latest_reading.value if latest_reading else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            last_date = latest_reading.reading_date.strftime("%d.%m.%Y") if latest_reading else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            print(f"\n{counter.description}")
            print(f"  –ù–æ–º–µ—Ä: {counter.number}")
            print(f"  –¢–∏–ø: {'–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞' if counter.water_type == 'hot' else '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞'}")
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {last_value} –º¬≥ ({last_date})")
    
    def show_readings_history(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        print("\nüìà –ò–°–¢–û–†–ò–Ø –ü–û–ö–ê–ó–ê–ù–ò–ô")
        print("-"*30)
        
        counters = self.counter_service.get_all_counters()
        if not counters:
            print("–°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for counter in counters:
            print(f"\n{counter.description} ({counter.number})")
            print("-" * 40)
            
            readings = self.reading_service.get_readings_by_counter(counter.id, 5)
            if not readings:
                print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            for reading in readings:
                print(f"  {reading.reading_date.strftime('%d.%m.%Y')}: {reading.value} –º¬≥")
    
    def calculate_monthly_payment(self):
        """–†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–µ—Å—è—Ü"""
        print("\nüí∞ –†–ê–°–ß–ï–¢ –ü–õ–ê–¢–ï–ñ–ê –ó–ê –ú–ï–°–Ø–¶")
        print("-"*30)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_date = datetime.now()
        default_year = current_date.year
        default_month = current_date.month
        
        try:
            year_input = input(f"–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_year}): ").strip()
            year = int(year_input) if year_input else default_year
            
            month_input = input(f"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (1-12, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_month}): ").strip()
            month = int(month_input) if month_input else default_month
            
            if month < 1 or month > 12:
                print("‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
                return
            
            calculation = self.payment_service.calculate_monthly_payment(year, month)
            
            print(f"\nüìä –†–ê–°–ß–ï–¢ –ó–ê {month:02d}.{year}")
            print("="*40)
            print(f"–ü–µ—Ä–∏–æ–¥: {calculation.period_start.strftime('%d.%m.%Y')} - {calculation.period_end.strftime('%d.%m.%Y')}")
            print(f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã: {calculation.cold_water_consumption} –º¬≥")
            print(f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã: {calculation.hot_water_consumption} –º¬≥")
            print(f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥—ã: {calculation.wastewater_consumption} –º¬≥")
            print(f"–¢–∞—Ä–∏—Ñ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã: {calculation.cold_water_rate:.2f} —Ä—É–±/–º¬≥")
            print(f"–¢–∞—Ä–∏—Ñ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã: {calculation.hot_water_rate:.2f} —Ä—É–±/–º¬≥")
            print(f"–¢–∞—Ä–∏—Ñ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {calculation.wastewater_rate:.2f} —Ä—É–±/–º¬≥")
            print(f"–°—É–º–º–∞ –∑–∞ —Ö–æ–ª–æ–¥–Ω—É—é –≤–æ–¥—É: {calculation.cold_water_consumption * calculation.cold_water_rate:.2f} —Ä—É–±")
            print(f"–°—É–º–º–∞ –∑–∞ –≥–æ—Ä—è—á—É—é –≤–æ–¥—É: {calculation.hot_water_consumption * calculation.hot_water_rate:.2f} —Ä—É–±")
            print(f"–°—É–º–º–∞ –∑–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é: {calculation.wastewater_consumption * calculation.wastewater_rate:.2f} —Ä—É–±")
            print(f"–ò–¢–û–ì–û: {calculation.total_amount:.2f} —Ä—É–±")
            
            save = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏? (y/n): ").lower()
            if save == 'y':
                notes = input("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip() or None
                payment = self.payment_service.create_payment(calculation, notes)
                print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {payment.id}")
                
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def show_payments_history(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        print("\nüí≥ –ò–°–¢–û–†–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô")
        print("-"*30)
        
        payments = self.payment_service.get_all_payments()
        if not payments:
            print("–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for payment in payments:
            print(f"\n–ü–ª–∞—Ç–µ–∂ #{payment.id}")
            print(f"–ü–µ—Ä–∏–æ–¥: {payment.period_start.strftime('%d.%m.%Y')} - {payment.period_end.strftime('%d.%m.%Y')}")
            print(f"–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: {payment.cold_water_consumption} –º¬≥ = {payment.cold_water_amount:.2f} —Ä—É–±")
            print(f"–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: {payment.hot_water_consumption} –º¬≥ = {payment.hot_water_amount:.2f} —Ä—É–±")
            print(f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {payment.wastewater_consumption} –º¬≥ = {payment.wastewater_amount:.2f} —Ä—É–±")
            print(f"–ò–¢–û–ì–û: {payment.total_amount:.2f} —Ä—É–±")
            if payment.notes:
                print(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {payment.notes}")
            print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω: {payment.calculated_at.strftime('%d.%m.%Y %H:%M')}")
    
    def manage_tariffs(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
        print("\n‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–†–ò–§–ê–ú–ò")
        print("-"*30)
        
        while True:
            print("\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã")
            print("2. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == "1":
                self.show_current_tariffs()
            elif choice == "2":
                self.change_tariff()
            elif choice == "0":
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def show_current_tariffs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã"""
        print("\nüìã –¢–ï–ö–£–©–ò–ï –¢–ê–†–ò–§–´")
        print("-"*30)
        
        hot_tariff = self.payment_service.get_current_tariff("hot_water")
        cold_tariff = self.payment_service.get_current_tariff("cold_water")
        wastewater_tariff = self.payment_service.get_current_tariff("wastewater")
        
        if cold_tariff:
            print(f"–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: {cold_tariff.price_per_cubic_meter:.2f} —Ä—É–±/–º¬≥")
            print(f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {cold_tariff.start_date.strftime('%d.%m.%Y')}")
        else:
            print("‚ùå –¢–∞—Ä–∏—Ñ –Ω–∞ —Ö–æ–ª–æ–¥–Ω—É—é –≤–æ–¥—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if hot_tariff:
            print(f"–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: {hot_tariff.price_per_cubic_meter:.2f} —Ä—É–±/–º¬≥")
            print(f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {hot_tariff.start_date.strftime('%d.%m.%Y')}")
        else:
            print("‚ùå –¢–∞—Ä–∏—Ñ –Ω–∞ –≥–æ—Ä—è—á—É—é –≤–æ–¥—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if wastewater_tariff:
            print(f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {wastewater_tariff.price_per_cubic_meter:.2f} —Ä—É–±/–º¬≥")
            print(f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {wastewater_tariff.start_date.strftime('%d.%m.%Y')}")
        else:
            print("‚ùå –¢–∞—Ä–∏—Ñ –Ω–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def change_tariff(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ"""
        print("\nüí∞ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ê–†–ò–§–ê")
        print("-"*30)
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É—Å–ª—É–≥:")
        print("1. cold_water - —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞")
        print("2. hot_water - –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (–ø–æ–¥–æ–≥—Ä–µ–≤)")
        print("3. wastewater - —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è")
        
        service_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏: ").strip().lower()
        if service_type not in ["cold_water", "hot_water", "wastewater"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É—Å–ª—É–≥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'cold_water', 'hot_water' –∏–ª–∏ 'wastewater'")
            return
        
        try:
            price = float(input("–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≥ (—Ä—É–±): "))
            if price <= 0:
                print("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
            self.payment_service.create_tariff(service_type, price, datetime.now())
            
            service_names = {
                "cold_water": "—Ö–æ–ª–æ–¥–Ω—É—é –≤–æ–¥—É",
                "hot_water": "–≥–æ—Ä—è—á—É—é –≤–æ–¥—É (–ø–æ–¥–æ–≥—Ä–µ–≤)",
                "wastewater": "—É—Ç–∏–ª–∏–∑–∞—Ü–∏—é"
            }
            print(f"‚úÖ –¢–∞—Ä–∏—Ñ –Ω–∞ {service_names.get(service_type, service_type)} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {price:.2f} —Ä—É–±/–º¬≥")
            
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("-"*30)
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        counters = self.counter_service.initialize_default_counters()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(counters)} —Å—á–µ—Ç—á–∏–∫–æ–≤")
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        tariffs = self.payment_service.initialize_default_tariffs()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tariffs)} —Ç–∞—Ä–∏—Ñ–æ–≤")
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    def manage_counters(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞–º–∏"""
        print("\nüîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê–ú–ò")
        print("-"*30)
        
        while True:
            print("\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏")
            print("2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫")
            print("3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫")
            print("4. –£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == "1":
                self.show_counters()
            elif choice == "2":
                self.add_counter()
            elif choice == "3":
                self.edit_counter()
            elif choice == "4":
                self.delete_counter()
            elif choice == "0":
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def add_counter(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞"""
        print("\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê")
        print("-"*30)
        
        try:
            number = input("–ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞: ").strip()
            if not number:
                print("‚ùå –ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—á–µ—Ç—á–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
            existing = self.counter_service.get_counter_by_number(number)
            if existing:
                print(f"‚ùå –°—á–µ—Ç—á–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º '{number}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            print("–¢–∏–ø –≤–æ–¥—ã:")
            print("1. hot - –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞")
            print("2. cold - —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞")
            
            water_type = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1 –∏–ª–∏ 2): ").strip()
            if water_type == "1":
                water_type = "hot"
            elif water_type == "2":
                water_type = "cold"
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–¥—ã")
                return
            
            description = input("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip() or None
            
            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            counter_data = CounterCreate(
                number=number,
                water_type=water_type,
                description=description
            )
            
            new_counter = self.counter_service.create_counter(counter_data)
            print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ '{number}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {new_counter.id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
    
    def edit_counter(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        print("\n‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê")
        print("-"*30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤
        counters = self.counter_service.get_all_counters()
        if not counters:
            print("‚ùå –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏:")
        for i, counter in enumerate(counters, 1):
            print(f"{i}. {counter.number} - {counter.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
            if choice < 1 or choice > len(counters):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                return
            
            counter = counters[choice - 1]
            print(f"\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: {counter.number}")
            print(f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {counter.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
            print(f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {'–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞' if counter.water_type == 'hot' else '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞'}")
            
            while True:
                print("\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?")
                print("1. –ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞")
                print("2. –¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞")
                print("3. –ù–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ")
                print("0. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                
                edit_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
                
                if edit_choice == "1":
                    self.edit_counter_number(counter)
                elif edit_choice == "2":
                    self.edit_counter_type(counter)
                elif edit_choice == "3":
                    self.edit_counter_description(counter)
                elif edit_choice == "0":
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                counter = self.counter_service.get_counter(counter.id)
                if not counter:
                    print("‚ùå –°—á–µ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                print(f"\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∞:")
                print(f"–ù–æ–º–µ—Ä: {counter.number}")
                print(f"–¢–∏–ø: {'–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞' if counter.water_type == 'hot' else '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞'}")
                print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {counter.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    def edit_counter_number(self, counter):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        print(f"\nüìù –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–ú–ï–†–ê –°–ß–ï–¢–ß–ò–ö–ê")
        print("-"*40)
        print(f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {counter.number}")
        
        new_number = input("–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä (Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
        if not new_number:
            print("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∏–º —Å—á–µ—Ç—á–∏–∫–æ–º
        if new_number != counter.number:
            existing = self.counter_service.get_counter_by_number(new_number)
            if existing:
                print(f"‚ùå –°—á–µ—Ç—á–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º '{new_number}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        counter_data = CounterCreate(
            number=new_number,
            water_type=counter.water_type,
            description=counter.description
        )
        
        updated_counter = self.counter_service.update_counter(counter.id, counter_data)
        if updated_counter:
            print(f"‚úÖ –ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_number}'")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞")
    
    def edit_counter_type(self, counter):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        print(f"\nüåä –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–ò–ü–ê –°–ß–ï–¢–ß–ò–ö–ê")
        print("-"*40)
        print(f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {'–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞' if counter.water_type == 'hot' else '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞'}")
        
        print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø:")
        print("1. hot - –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞")
        print("2. cold - —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞")
        print("0. –û—Ç–º–µ–Ω–∞")
        
        type_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if type_choice == "0":
            print("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        elif type_choice == "1":
            new_water_type = "hot"
        elif type_choice == "2":
            new_water_type = "cold"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        counter_data = CounterCreate(
            number=counter.number,
            water_type=new_water_type,
            description=counter.description
        )
        
        updated_counter = self.counter_service.update_counter(counter.id, counter_data)
        if updated_counter:
            print(f"‚úÖ –¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{'–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞' if new_water_type == 'hot' else '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞'}'")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞")
    
    def edit_counter_description(self, counter):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞"""
        print(f"\nüìÑ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–ê")
        print("-"*40)
        print(f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {counter.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
        
        new_description = input("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
        if not new_description:
            print("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        counter_data = CounterCreate(
            number=counter.number,
            water_type=counter.water_type,
            description=new_description
        )
        
        updated_counter = self.counter_service.update_counter(counter.id, counter_data)
        if updated_counter:
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_description}'")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
    
    def delete_counter(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        print("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê")
        print("-"*30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤
        counters = self.counter_service.get_all_counters()
        if not counters:
            print("‚ùå –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏:")
        for i, counter in enumerate(counters, 1):
            print(f"{i}. {counter.number} - {counter.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
            if choice < 1 or choice > len(counters):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                return
            
            counter = counters[choice - 1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —É —ç—Ç–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            readings = self.reading_service.get_readings_by_counter(counter.id)
            if readings:
                print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ —Å—á–µ—Ç—á–∏–∫–∞ '{counter.number}' –µ—Å—Ç—å {len(readings)} –ø–æ–∫–∞–∑–∞–Ω–∏–π.")
                confirm = input("–£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
                if confirm != 'y':
                    print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return
            
            # –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            if self.counter_service.delete_counter(counter.id):
                print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ '{counter.number}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üåä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Water Counter!")
        
        while True:
            self.show_main_menu()
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == "1":
                self.input_readings()
            elif choice == "2":
                self.show_counters()
            elif choice == "3":
                self.show_readings_history()
            elif choice == "4":
                self.calculate_monthly_payment()
            elif choice == "5":
                self.show_payments_history()
            elif choice == "6":
                self.manage_tariffs()
            elif choice == "7":
                self.manage_counters()
            elif choice == "8":
                self.initialize_system()
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
